// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../cc
//   ../coolgame-cc/Define
//   ../lib/fairygui-ccc370.d.ts
//   ../coolgame-cc
//   ../coolgame-cc-sys-time
//   ../gnfun-cc

declare module 'coolgame-cc-sys-fui' {
    import { BoneAnim } from "coolgame-cc-sys-fui/BoneAnim";
    import { DlgBase } from "coolgame-cc-sys-fui/DlgBase";
    import { DlgKit, DlgLayer } from "coolgame-cc-sys-fui/DlgKit";
    import FgoPool from "coolgame-cc-sys-fui/FgoPool";
    import ListItem from "coolgame-cc-sys-fui/ListItem";
    import ListWrap from "coolgame-cc-sys-fui/ListWrap";
    import UIBase from "coolgame-cc-sys-fui/UIBase";
    import { UIDocker } from "coolgame-cc-sys-fui/UIDocker";
    import UIWrap from "coolgame-cc-sys-fui/UIWrap";
    export { FUISys } from "coolgame-cc-sys-fui/FUISys";
    export { FgoPool };
    export { BoneAnim };
    export { DlgBase };
    export { DlgKit };
    export { ListItem };
    export { ListWrap };
    export { UIBase };
    export { UIDocker };
    export { UIWrap };
    export { DlgLayer };
}

declare module 'coolgame-cc-sys-fui/BoneAnim' {
    import { sp } from "cc";
    import { Action } from "coolgame-cc/Define";
    import { GLoader3D } from "fairygui-ccc370";
    import UIBase from "coolgame-cc-sys-fui/UIBase";
    export class BoneAnim {
        get lod3d(): GLoader3D;
        get skeleton(): sp.Skeleton;
        constructor(lod3d: GLoader3D, owner: UIBase);
        config(option: {
            vAlign?: "b" | "m" | "t";
            align?: "l" | "c" | "r";
            idleAnim: string;
            model: string;
            package?: string;
        }): void;
        playAnim(anim: string, loop: boolean, onComplete?: Action, thisArg?: any, option?: {
            timeScale?: number;
            autoIdle?: boolean;
        }): void;
    }
}

declare module 'coolgame-cc-sys-fui/DlgBase' {
    import { GComponent } from "fairygui-ccc370";
    import { DlgKit, DlgLayer } from "coolgame-cc-sys-fui/DlgKit";
    import UIBase from "coolgame-cc-sys-fui/UIBase";
    export abstract class DlgBase extends UIBase {
            static readonly SystemCtrl: {
                    /**
                        * 关闭按钮
                        */
                    CloseButton: string;
                    /**
                        * 黑色半透明遮罩。如果 dlg 中没有设置，则会自动创建一个。
                        */
                    BlackGraph: string;
            };
            abstract get dlgRes(): string;
            get dlgPak(): string;
            get dlgLayer(): DlgLayer;
            get isClosing(): boolean;
            init(fgc: GComponent, dlgkit: DlgKit): void;
            show(): void;
            hide(): void;
            close(): void;
            /**
             * 启用停靠
             * @param target 停靠执行的ui对象，名字或者对象实例，可选，默认DlgBase.SystemCtrl.Docker
             * @param bg 停靠界面背景对象执行alpha渐变的对象，可选，默认DlgBase.SystemCtrl.Black
             * @param dockPars target停靠参数，默认UIDocker.Dock.Left
             * @param bgDockPars bg停靠参数，默认UIDocker.Dock.Fade
             */
            dock(dockPars?: any, bgDockPars?: any): void;
            /**
                * 提到最上层
                */
            moveToFront(): void;
            /**
                * 停靠出来并显示（内部调用）
                */
            _dockOut(): void;
            /**
                * <To-Override>
                * 弹窗关闭时调用
                */
            protected OnClose(): void;
            /**
                * <To-Override>
                * 窗口进入的停靠动画结束
                */
            protected OnDockOut(): void;
            /**
                * 点击背景是否关闭
                */
            protected OnBgClickClose(): boolean;
            /**
                * 窗口是否要全屏化
                * @returns
                */
            protected OnGetFullScreen(): boolean;
            /**
                * 获取背景透明度，0表示不需要背景
             */
            protected OnGetBgAlpha(): number;
            /**
                * 背景透明度大于0时有效。背景类型
                * @returns "loader" | "graph"
                */
            protected OnGetBgType(): "loader" | "graph";
            /**
                * 背景类型为 "loader" 时起作用
                * @returns 背景Loader资源路径
                */
            protected OnGetBgLoaderResUrl(): string;
            /**
                * <To-override>
                * 弹窗初始化时调用
                */
            protected abstract OnInit(): void;
    }
}

declare module 'coolgame-cc-sys-fui/DlgKit' {
    import { KitBase } from "coolgame-cc";
    import { Action, types_constructor } from "coolgame-cc/Define";
    import { GComponent } from "fairygui-ccc370";
    import { DlgBase } from "coolgame-cc-sys-fui/DlgBase";
    import { FUISys } from "coolgame-cc-sys-fui/FUISys";
    import TimeSys from "coolgame-cc-sys-time";
    export enum DlgLayer {
        Background = 0,
        Base = 1,
        Front = 2,
        Topest = 3,
        GM = 4,
        ItemFly = 5,
        TopMask = 6
    }
    export class DlgKit extends KitBase {
        kitName: string;
        get timeSys(): TimeSys;
        get fuiSys(): FUISys;
        get plat(): string;
        get channle(): string;
        protected OnInit(complete: Action): void;
        protected OnLateInit(complete: Action): void;
        protected OnDispose(): void;
        _getLayer(layer: DlgLayer): GComponent;
        fetchDlg<T extends DlgBase>(dlgCtrlType: types_constructor<T>): T;
        getDlg<T extends DlgBase>(dlgCtrlType: types_constructor<T>): T;
        closeDlg<T extends DlgBase>(dlgCtrlType: types_constructor<T>): void;
        shake(): void;
    }
}

declare module 'coolgame-cc-sys-fui/FgoPool' {
    import { GObject } from "fairygui-ccc370";
    export default class FgoPool {
        static alloc(url: string): FgoPool;
        static free: (o: FgoPool) => void;
        get(): GObject;
        ret(obj: GObject): void;
        reset(url: string): void;
    }
}

declare module 'coolgame-cc-sys-fui/ListItem' {
    import UIWrap from "coolgame-cc-sys-fui/UIWrap";
    export default abstract class ListItem extends UIWrap {
        protected curData: any;
        getCurData(): any;
        refresh(data: any, index: number): void;
        internalRefresh(): void;
        get index(): number;
        protected abstract OnRefresh(data: any, index: number): void;
    }
}

declare module 'coolgame-cc-sys-fui/ListWrap' {
    import { types_constructor } from "coolgame-cc/Define";
    import ListItem from "coolgame-cc-sys-fui/ListItem";
    import UIWrap from "coolgame-cc-sys-fui/UIWrap";
    export default class ListWrap<T extends ListItem> extends UIWrap {
        protected OnInit(): void;
        initList(type: types_constructor<T>, sourceData: Array<any>): void;
        set SourceData(data: Array<any>);
        get SourceData(): Array<any>;
        get itemDict(): Map<string, ListItem>;
        /**
          * 刷新对应数据位置的格子
          */
        refreshItemByIndex(index: number): void;
        /**刷新全部 */
        refreshAll(): void;
    }
}

declare module 'coolgame-cc-sys-fui/UIBase' {
    import { EventTarget, Node, Tween } from "cc";
    import { types_constructor } from "coolgame-cc/Define";
    import { Controller, GButton, GComponent, GGroup, GLabel, GList, GLoader, GLoader3D, GObject, GTextField, Transition } from "fairygui-ccc370";
    import UIWrap from "coolgame-cc-sys-fui/UIWrap";
    import { DlgKit } from "coolgame-cc-sys-fui/DlgKit";
    import { XTween } from "gnfun-cc";
    export default abstract class UIBase {
            get dlgkit(): DlgKit;
            get isClosed(): boolean;
            get fgc(): GComponent;
            get node(): Node;
            init(fgo: GObject, dlgkit: DlgKit): void;
            show(): void;
            hide(): void;
            /**
                * 提到最上层
                */
            moveToFront(): void;
            close(): void;
            protected wrap<T extends UIWrap>(type: types_constructor<T>, fgo: GObject | string): T;
            protected unwrap<T extends UIWrap>(wrap: T): void;
            protected getWrap<T extends UIWrap>(type: types_constructor<T>): T;
            protected getWraps<T extends UIWrap>(type: types_constructor<T>): T[];
            protected getChild(childName: string): GObject;
            protected getChildInGroup(childName: string, groupName: string): GObject;
            protected ajustPlat(childName: string, ctrlName?: string): void;
            protected ajustChannel(childName: string, ctrlName?: string): void;
            protected getCom(childName: string): GComponent;
            protected getBtn(childName: string): GButton;
            protected getGraph(childName: string): import("fairygui-ccc370").GGraph;
            protected getLoader(childName: string): GLoader;
            protected getLoader3D(childName: string): GLoader3D;
            protected getTxt(childName: string): GTextField;
            protected getLabel(childName: string): GLabel;
            protected getList(childName: string): GList;
            protected getGroup(childName: string): GGroup;
            protected getTransition(name: string): Transition;
            protected getController(name: string): Controller;
            /**
                * 添加自释放的按钮绑定
                * @param objName 节点名称。为空表示当前节点本身 | 节点
                * @param listener
                */
            protected addBtnEvt(objName: string | GObject, listener: (enableBtn: Function) => void, thisArg?: any): void;
            protected addTween<T>(target: T): Tween<T>;
            protected addXTween<T>(target: T): XTween<T>;
            protected addEvt(e: EventTarget, event: string, listener: (...arg: any) => void, thisArg?: any): void;
            protected addFgoEvt(fgo: GObject, event: string, listener: (...arg: any) => void, thisArg?: any): void;
            protected addDelay(delay: number, func: Function, caller?: any, ...arg: Array<any>): number;
            protected addNextFrame(func: Function, caller?: any, ...arg: Array<any>): number;
            protected addInterval(interval: number, loop: number, func: Function, caller?: any, ...arg: Array<any>): number;
            protected delTimer(timerId: number): null;
            /**
                * <can-override>
                * 在销毁 Fgo 时被调用
                */
            protected OnDisposeSelfFgo(selfFgo: GObject): void;
    }
}

declare module 'coolgame-cc-sys-fui/UIDocker' {
    import { TweenEasing } from "cc";
    export interface UIDockerPropMod {
            x?: number;
            sx?: number;
            rx?: number;
            y?: number;
            sy?: number;
            ry?: number;
            alpha?: number;
            salpha?: number;
            ralpha?: number;
            scaleX?: number;
            rscaleX?: number;
            sscaleX?: number;
            scaleY?: number;
            rscaleY?: number;
            sscaleY?: number;
    }
    export interface UIDockerTweenProp {
            x?: number;
            y?: number;
            alpha?: number;
            scaleX?: number;
            scaleY?: number;
    }
    export class UIDocker {
            /**
                * 几种基本停靠类型
                */
            static readonly Dock: {
                    /**
                        * 左侧停靠
                        */
                    Left: {
                            out: {
                                    rx: number;
                            };
                            back: {
                                    x: number;
                                    sx: number;
                            };
                            out_ease: string;
                            back_ease: string;
                    };
                    /**
                        * 左侧停靠
                        */
                    LeftInRightOut: {
                            out: {
                                    rx: number;
                            };
                            back: {
                                    rx: number;
                                    sx: number;
                            };
                            out_ease: string;
                            back_ease: string;
                    };
                    /**
                        * 右侧停靠
                        */
                    Right: {
                            out: {
                                    rx: number;
                            };
                            back: {
                                    rx: number;
                                    sx: number;
                            };
                            out_ease: string;
                            back_ease: string;
                    };
                    /**
                        * 顶部停靠
                        */
                    Top: {
                            out: {
                                    ry: number;
                            };
                            back: {
                                    ry: number;
                                    sy: number;
                            };
                            out_ease: string;
                            back_ease: string;
                    };
                    /**
                        * 底部停靠
                        */
                    Bottom: {
                            out: {
                                    ry: number;
                            };
                            back: {
                                    ry: number;
                                    sy: number;
                            };
                            out_ease: string;
                            back_ease: string;
                    };
                    /**
                        * 渐显
                        */
                    Fade: {
                            out: {
                                    alpha: number;
                            };
                            back: {
                                    alpha: number;
                            };
                            out_ease: string;
                            back_ease: string;
                    };
                    /**
                        * 缓慢渐显
                        */
                    FadeSlowly: {
                            out: {
                                    alpha: number;
                            };
                            back: {
                                    alpha: number;
                            };
                            out_dur: number;
                            back_dur: number;
                            out_ease: string;
                            back_ease: string;
                    };
                    /**
                        * 从中间像气泡一样冒出来
                        */
                    Bubble: {
                            out: {
                                    sscaleX: number;
                                    sscaleY: number;
                                    alpha: number;
                            };
                            back: {
                                    scaleX: number;
                                    scaleY: number;
                                    alpha: number;
                            };
                            out_ease: string;
                            back_ease: string;
                            out_dur: number;
                            back_dur: number;
                            pivotX: number;
                            pivotY: number;
                    };
                    /**
                        * 像幽灵一样浮上来
                        */
                    GhostUp: {
                            out: {
                                    sscaleX: number;
                                    sscaleY: number;
                                    alpha: number;
                                    ry: number;
                            };
                            back: {
                                    alpha: number;
                                    sscaleX: number;
                                    sscaleY: number;
                                    ry: number;
                            };
                            out_ease: string;
                            back_ease: string;
                            out_dur: number;
                            back_dur: number;
                            pivotX: number;
                            pivotY: number;
                    };
                    /**
                        *
                        */
                    GhostUp2: {
                            out: {
                                    sscaleX: number;
                                    sscaleY: number;
                                    alpha: number;
                                    ry: number;
                            };
                            back: {
                                    alpha: number;
                                    sscaleX: number;
                                    sscaleY: number;
                                    ry: number;
                            };
                            out_ease: string;
                            back_ease: string;
                            out_dur: number;
                            back_dur: number;
                            pivotX: number;
                            pivotY: number;
                    };
            };
            /**
                * 创建一个docker但是不执行
                * @param target docker目标对象
                * @param dockPars docker参数
                * @param complete docker结束之后的回调，可选
                * @return UIDocker实例
                */
            static create(target: any, dockPars: any): UIDocker;
            /**
                * 销毁docker
                * @param docker 被销毁的docker，可以传null
                * @return undefined
                */
            static destroy(docker: UIDocker): undefined;
            static fade_ease: TweenEasing;
            /**
                * 停靠出来（展示出来）
                */
            dockOut(cb?: Function): void;
            /**
                * 停靠回去（隐藏）
                */
            dockBack(cb?: Function): void;
            /**
                * 顺带一个docker，跟自己绑定
                * @param docker
                * @return this
                */
            take(docker: UIDocker): UIDocker;
    }
}

declare module 'coolgame-cc-sys-fui/UIWrap' {
    import { GObject } from "fairygui-ccc370";
    import UIBase from "coolgame-cc-sys-fui/UIBase";
    import { DlgKit } from "coolgame-cc-sys-fui/DlgKit";
    export default abstract class UIWrap extends UIBase {
            init(fgo: GObject, dlgkit: DlgKit): void;
            close(): void;
            protected OnDisposeSelfFgo(selfFgo: GObject): void;
            /**
                * <To-Override>
                * 装饰关闭时调用
                */
            protected OnClose(): void;
            /**
                * <To-override>
                * 装饰初始化时调用
                */
            protected abstract OnInit(): void;
    }
}

declare module 'coolgame-cc-sys-fui/FUISys' {
    import { Vec2 } from "cc";
    import { SysBase } from "coolgame-cc";
    import { Action } from "coolgame-cc/Define";
    import * as fgui from "fairygui-ccc370";
    import FgoPool from "coolgame-cc-sys-fui/FgoPool";
    import TimeSys from "coolgame-cc-sys-time";
    export class FUISys extends SysBase {
        sysName: string;
        get timeSys(): TimeSys;
        get fgoPool(): fgui.GObjectPool;
        get plat(): string;
        get channel(): string;
        get root(): fgui.GRoot;
        protected OnInit(complete: Action): void;
        protected OnLateInit(complete: Action): void;
        protected OnDispose(): void;
        init(timeSys: TimeSys, getPlat?: () => string, getChannel?: () => string): void;
        loadPackage(packPath: string, onProgress?: (finish: number, total: number) => void, onLoaded?: (error: any) => void): void;
        createObject(pak: string, name: string): fgui.GObject;
        toUrl(pak: string, name: string): string;
        toUrlByArr(pair: string[]): string;
        allocPool(url: string): FgoPool;
        freePool(pool: FgoPool): void;
        centerOfGlobal(fgo: fgui.GObject): Vec2;
    }
}

